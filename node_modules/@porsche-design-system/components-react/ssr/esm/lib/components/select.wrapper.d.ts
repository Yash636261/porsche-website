import { type HTMLAttributes } from 'react';
import type { SelectDropdownDirection, BreakpointCustomizable, SelectUpdateEventDetail, SelectState, Theme } from '../types';
export type PSelectProps = Omit<HTMLAttributes<{}>, 'color'> & {
    /**
     * The description text.
     */
    description?: string;
    /**
     * Disables the select
     */
    disabled?: boolean;
    /**
     * Changes the direction to which the dropdown list appears.
     */
    dropdownDirection?: SelectDropdownDirection;
    /**
     * Show or hide label. For better accessibility it is recommended to show the label.
     */
    hideLabel?: BreakpointCustomizable<boolean>;
    /**
     * The label text.
     */
    label?: string;
    /**
     * The message styled depending on validation state.
     */
    message?: string;
    /**
     * The name of the control.
     */
    name: string;
    /**
     * Emitted when the selection is changed.
     */
    onUpdate?: (event: CustomEvent<SelectUpdateEventDetail>) => void;
    /**
     * A Boolean attribute indicating that an option with a non-empty string value must be selected.
     */
    required?: boolean;
    /**
     * The validation state.
     */
    state?: SelectState;
    /**
     * Adapts the select color depending on the theme.
     */
    theme?: Theme;
    /**
     * The selected value.
     */
    value?: string;
};
export declare const PSelect: import("react").ForwardRefExoticComponent<Omit<HTMLAttributes<{}>, "color"> & {
    /**
     * The description text.
     */
    description?: string;
    /**
     * Disables the select
     */
    disabled?: boolean;
    /**
     * Changes the direction to which the dropdown list appears.
     */
    dropdownDirection?: SelectDropdownDirection;
    /**
     * Show or hide label. For better accessibility it is recommended to show the label.
     */
    hideLabel?: BreakpointCustomizable<boolean>;
    /**
     * The label text.
     */
    label?: string;
    /**
     * The message styled depending on validation state.
     */
    message?: string;
    /**
     * The name of the control.
     */
    name: string;
    /**
     * Emitted when the selection is changed.
     */
    onUpdate?: (event: CustomEvent<SelectUpdateEventDetail>) => void;
    /**
     * A Boolean attribute indicating that an option with a non-empty string value must be selected.
     */
    required?: boolean;
    /**
     * The validation state.
     */
    state?: SelectState;
    /**
     * Adapts the select color depending on the theme.
     */
    theme?: Theme;
    /**
     * The selected value.
     */
    value?: string;
} & {
    children?: import("react").ReactNode;
} & import("react").RefAttributes<HTMLElement>>;
