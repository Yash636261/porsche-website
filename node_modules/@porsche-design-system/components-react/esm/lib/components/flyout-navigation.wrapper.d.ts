import { type HTMLAttributes } from 'react';
import type { SelectedAriaAttributes, FlyoutNavigationAriaAttribute, FlyoutNavigationUpdateEventDetail, Theme } from '../types';
export type PFlyoutNavigationProps = Omit<HTMLAttributes<{}>, 'color'> & {
    /**
     * Defines which flyout-navigation-item to be visualized as opened.
     */
    activeIdentifier?: string | undefined;
    /**
     * Add ARIA attributes.
     */
    aria?: SelectedAriaAttributes<FlyoutNavigationAriaAttribute>;
    /**
     * Emitted when the component requests to be dismissed.
     */
    onDismiss?: (event: CustomEvent<void>) => void;
    /**
     * Emitted when activeIdentifier is changed.
     */
    onUpdate?: (event: CustomEvent<FlyoutNavigationUpdateEventDetail>) => void;
    /**
     * If true, the flyout-navigation is visualized as opened.
     */
    open?: boolean;
    /**
     * Adapts the flyout-navigation color depending on the theme.
     */
    theme?: Theme;
};
export declare const PFlyoutNavigation: import("react").ForwardRefExoticComponent<Omit<HTMLAttributes<{}>, "color"> & {
    /**
     * Defines which flyout-navigation-item to be visualized as opened.
     */
    activeIdentifier?: string | undefined;
    /**
     * Add ARIA attributes.
     */
    aria?: SelectedAriaAttributes<"aria-label"> | undefined;
    /**
     * Emitted when the component requests to be dismissed.
     */
    onDismiss?: ((event: CustomEvent<void>) => void) | undefined;
    /**
     * Emitted when activeIdentifier is changed.
     */
    onUpdate?: ((event: CustomEvent<FlyoutNavigationUpdateEventDetail>) => void) | undefined;
    /**
     * If true, the flyout-navigation is visualized as opened.
     */
    open?: boolean | undefined;
    /**
     * Adapts the flyout-navigation color depending on the theme.
     */
    theme?: "light" | "dark" | "auto" | undefined;
} & {
    children?: import("react").ReactNode;
} & import("react").RefAttributes<HTMLElement>>;
